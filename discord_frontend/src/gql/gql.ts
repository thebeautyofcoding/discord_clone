/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation AddMemberToServer($inviteCode: String!, $serverId: Float!) {\n    addMemberToServer(inviteCode: $inviteCode, serverId: $serverId) {\n      id\n      name\n    }\n  }\n": types.AddMemberToServerDocument,
    "\n  mutation ChangeMemberRole($input: ChangeMemberRoleDto!) {\n    changeMemberRole(input: $input) {\n      id\n      name\n      imageUrl\n      members {\n        id\n        role\n      }\n    }\n  }\n": types.ChangeMemberRoleDocument,
    "\n  mutation CreateAccessToken($name: String!, $chatId: String!) {\n    createAccessToken(name: $name, chatId: $chatId)\n  }\n": types.CreateAccessTokenDocument,
    "\n  mutation CreateChannelOnServer($input: CreateChannelOnServerDto!) {\n    createChannelOnServer(input: $input) {\n      id\n      name\n      members {\n        id\n      }\n      imageUrl\n    }\n  }\n": types.CreateChannelOnServerDocument,
    "\n  mutation CreateMessage($input: CreateMessageDto!, $file: Upload) {\n    createMessage(input: $input, file: $file) {\n      message {\n        ... on DirectMessage {\n          id\n\n          content\n          deleted\n          createdAt\n          conversationId\n          fileUrl\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n          content\n          deleted\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n": types.CreateMessageDocument,
    "\n  mutation CreateProfile($input: CreateProfileDto!) {\n    createProfile(input: $input) {\n      id\n      name\n      email\n    }\n  }\n": types.CreateProfileDocument,
    "\n  mutation CreateServer($input: CreateServerDto!, $file: Upload!) {\n    createServer(input: $input, file: $file) {\n      id\n      name\n      members {\n        id\n      }\n      imageUrl\n    }\n  }\n": types.CreateServerDocument,
    "\n  mutation DeleteChannelFromServer($input: DeleteChannelFromServerDto!) {\n    deleteChannelFromServer(input: $input)\n  }\n": types.DeleteChannelFromServerDocument,
    "\n  mutation DeleteMemberFromServer($input: DeleteMemberDto!) {\n    deleteMemberFromServer(input: $input) {\n      id\n      name\n      imageUrl\n      members {\n        id\n        role\n        profileId\n        profile {\n          id\n          name\n          imageUrl\n          email\n        }\n      }\n    }\n  }\n": types.DeleteMemberFromServerDocument,
    "\n  mutation DeleteServer($input: DeleteServerDto!) {\n    deleteServer(input: $input)\n  }\n": types.DeleteServerDocument,
    "\n  mutation GetOrCreateConversation($input: GetOrCreateConversationDto!) {\n    getOrCreateConversation(input: $input) {\n      id\n      memberOneId\n      memberTwoId\n      memberOne {\n        profile {\n          id\n          name\n          email\n          imageUrl\n        }\n      }\n\n      memberTwo {\n        profile {\n          id\n          name\n          email\n          imageUrl\n        }\n      }\n    }\n  }\n": types.GetOrCreateConversationDocument,
    "\n  mutation LeaveServer($input: LeaveServerDto!) {\n    leaveServer(input: $input)\n  }\n": types.LeaveServerDocument,
    "\n  mutation UpdateChannel($input: UpdateChannelDto!) {\n    updateChannel(input: $input) {\n      id\n      name\n      type\n    }\n  }\n": types.UpdateChannelDocument,
    "\n  mutation UpdateMessage(\n    $messageId: Float!\n    $content: String!\n    $conversationId: Float\n    $channelId: Float\n  ) {\n    updateMessage(\n      messageId: $messageId\n      content: $content\n      conversationId: $conversationId\n      channelId: $channelId\n    ) {\n      message {\n        ... on DirectMessage {\n          content\n          updatedAt\n        }\n        ... on Message {\n          content\n          updatedAt\n        }\n      }\n    }\n  }\n": types.UpdateMessageDocument,
    "\n  mutation UpdateServer($input: UpdateServerDto!, $file: Upload) {\n    updateServer(input: $input, file: $file) {\n      id\n      name\n      imageUrl\n    }\n  }\n": types.UpdateServerDocument,
    "\n  mutation UpdateServerWithNewInviteCode($serverId: Float!) {\n    updateServerWithNewInviteCode(serverId: $serverId) {\n      id\n      name\n      imageUrl\n      inviteCode\n    }\n  }\n": types.UpdateServerWithNewInviteCodeDocument,
    "\n  query GetChannelById($input: FindChannelByIdDto!) {\n    getChannelById(input: $input) {\n      id\n      name\n      type\n      members {\n        id\n        profile {\n          id\n          name\n          email\n          imageUrl\n        }\n      }\n    }\n  }\n": types.GetChannelByIdDocument,
    "\n  query GetMemberById($memberId: Float!, $serverId: Float!) {\n    getMemberById(memberId: $memberId, serverId: $serverId) {\n      id\n      role\n      profile {\n        id\n        name\n        email\n        imageUrl\n        servers {\n          id\n          name\n          channels {\n            id\n            name\n            type\n          }\n        }\n      }\n    }\n  }\n": types.GetMemberByIdDocument,
    "\n  query GetMemberByProfileId($profileId: Float!, $serverId: Float!) {\n    getMemberByProfileId(profileId: $profileId, serverId: $serverId) {\n      id\n      role\n      profile {\n        id\n        name\n        email\n      }\n    }\n  }\n": types.GetMemberByProfileIdDocument,
    "\n  query GetMessagesByConversationIdOrChannelId(\n    $conversationId: Float\n    $channelId: Float\n  ) {\n    getMessagesByConversationIdOrChannelId(\n      conversationId: $conversationId\n      channelId: $channelId\n    ) {\n      messages {\n        ... on DirectMessage {\n          id\n\n          content\n          deleted\n          createdAt\n          conversationId\n          fileUrl\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n          content\n          deleted\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetMessagesByConversationIdOrChannelIdDocument,
    "\n  query GetProfileById($profileId: Float!) {\n    getProfileById(profileId: $profileId) {\n      id\n      name\n      email\n      servers {\n        id\n        name\n        channels {\n          id\n          name\n          type\n        }\n      }\n    }\n  }\n": types.GetProfileByIdDocument,
    "\n  query GetServerById($id: Float!, $profileId: Float!) {\n    getServerById(id: $id, profileId: $profileId) {\n      id\n      profileId\n      name\n      imageUrl\n      inviteCode\n      channels {\n        id\n        type\n        name\n      }\n      members {\n        id\n        role\n\n        profileId\n        profile {\n          id\n          name\n          imageUrl\n          email\n        }\n      }\n      profile {\n        id\n        name\n        imageUrl\n        email\n      }\n    }\n  }\n": types.GetServerByIdDocument,
    "\n  query GetServerByProfileIdOfMember($profileId: Float!) {\n    getServerByProfileIdOfMember(profileId: $profileId) {\n      id\n      name\n      imageUrl\n    }\n  }\n": types.GetServerByProfileIdOfMemberDocument,
    "\n  subscription MessageCreated($conversationId: Float, $channelId: Float) {\n    messageCreated(conversationId: $conversationId, channelId: $channelId) {\n      message {\n        ... on DirectMessage {\n          id\n          content\n          deleted\n          createdAt\n          conversationId\n          fileUrl\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n          content\n          deleted\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n": types.MessageCreatedDocument,
    "\n  subscription MessageDeleted($conversationId: Float, $channelId: Float) {\n    messageDeleted(conversationId: $conversationId, channelId: $channelId) {\n      message {\n        ... on DirectMessage {\n          id\n          content\n          deleted\n          conversationId\n          updatedAt\n          createdAt\n          fileUrl\n          member {\n            role\n\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n\n          content\n          deleted\n          updatedAt\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n": types.MessageDeletedDocument,
    "\n  subscription MessageUpdated($conversationId: Float, $channelId: Float) {\n    messageUpdated(conversationId: $conversationId, channelId: $channelId) {\n      message {\n        ... on DirectMessage {\n          id\n          content\n          createdAt\n          conversationId\n          fileUrl\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n          content\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n": types.MessageUpdatedDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddMemberToServer($inviteCode: String!, $serverId: Float!) {\n    addMemberToServer(inviteCode: $inviteCode, serverId: $serverId) {\n      id\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation AddMemberToServer($inviteCode: String!, $serverId: Float!) {\n    addMemberToServer(inviteCode: $inviteCode, serverId: $serverId) {\n      id\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChangeMemberRole($input: ChangeMemberRoleDto!) {\n    changeMemberRole(input: $input) {\n      id\n      name\n      imageUrl\n      members {\n        id\n        role\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ChangeMemberRole($input: ChangeMemberRoleDto!) {\n    changeMemberRole(input: $input) {\n      id\n      name\n      imageUrl\n      members {\n        id\n        role\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateAccessToken($name: String!, $chatId: String!) {\n    createAccessToken(name: $name, chatId: $chatId)\n  }\n"): (typeof documents)["\n  mutation CreateAccessToken($name: String!, $chatId: String!) {\n    createAccessToken(name: $name, chatId: $chatId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateChannelOnServer($input: CreateChannelOnServerDto!) {\n    createChannelOnServer(input: $input) {\n      id\n      name\n      members {\n        id\n      }\n      imageUrl\n    }\n  }\n"): (typeof documents)["\n  mutation CreateChannelOnServer($input: CreateChannelOnServerDto!) {\n    createChannelOnServer(input: $input) {\n      id\n      name\n      members {\n        id\n      }\n      imageUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateMessage($input: CreateMessageDto!, $file: Upload) {\n    createMessage(input: $input, file: $file) {\n      message {\n        ... on DirectMessage {\n          id\n\n          content\n          deleted\n          createdAt\n          conversationId\n          fileUrl\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n          content\n          deleted\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateMessage($input: CreateMessageDto!, $file: Upload) {\n    createMessage(input: $input, file: $file) {\n      message {\n        ... on DirectMessage {\n          id\n\n          content\n          deleted\n          createdAt\n          conversationId\n          fileUrl\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n          content\n          deleted\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProfile($input: CreateProfileDto!) {\n    createProfile(input: $input) {\n      id\n      name\n      email\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProfile($input: CreateProfileDto!) {\n    createProfile(input: $input) {\n      id\n      name\n      email\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateServer($input: CreateServerDto!, $file: Upload!) {\n    createServer(input: $input, file: $file) {\n      id\n      name\n      members {\n        id\n      }\n      imageUrl\n    }\n  }\n"): (typeof documents)["\n  mutation CreateServer($input: CreateServerDto!, $file: Upload!) {\n    createServer(input: $input, file: $file) {\n      id\n      name\n      members {\n        id\n      }\n      imageUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteChannelFromServer($input: DeleteChannelFromServerDto!) {\n    deleteChannelFromServer(input: $input)\n  }\n"): (typeof documents)["\n  mutation DeleteChannelFromServer($input: DeleteChannelFromServerDto!) {\n    deleteChannelFromServer(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteMemberFromServer($input: DeleteMemberDto!) {\n    deleteMemberFromServer(input: $input) {\n      id\n      name\n      imageUrl\n      members {\n        id\n        role\n        profileId\n        profile {\n          id\n          name\n          imageUrl\n          email\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteMemberFromServer($input: DeleteMemberDto!) {\n    deleteMemberFromServer(input: $input) {\n      id\n      name\n      imageUrl\n      members {\n        id\n        role\n        profileId\n        profile {\n          id\n          name\n          imageUrl\n          email\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteServer($input: DeleteServerDto!) {\n    deleteServer(input: $input)\n  }\n"): (typeof documents)["\n  mutation DeleteServer($input: DeleteServerDto!) {\n    deleteServer(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GetOrCreateConversation($input: GetOrCreateConversationDto!) {\n    getOrCreateConversation(input: $input) {\n      id\n      memberOneId\n      memberTwoId\n      memberOne {\n        profile {\n          id\n          name\n          email\n          imageUrl\n        }\n      }\n\n      memberTwo {\n        profile {\n          id\n          name\n          email\n          imageUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GetOrCreateConversation($input: GetOrCreateConversationDto!) {\n    getOrCreateConversation(input: $input) {\n      id\n      memberOneId\n      memberTwoId\n      memberOne {\n        profile {\n          id\n          name\n          email\n          imageUrl\n        }\n      }\n\n      memberTwo {\n        profile {\n          id\n          name\n          email\n          imageUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LeaveServer($input: LeaveServerDto!) {\n    leaveServer(input: $input)\n  }\n"): (typeof documents)["\n  mutation LeaveServer($input: LeaveServerDto!) {\n    leaveServer(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateChannel($input: UpdateChannelDto!) {\n    updateChannel(input: $input) {\n      id\n      name\n      type\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateChannel($input: UpdateChannelDto!) {\n    updateChannel(input: $input) {\n      id\n      name\n      type\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateMessage(\n    $messageId: Float!\n    $content: String!\n    $conversationId: Float\n    $channelId: Float\n  ) {\n    updateMessage(\n      messageId: $messageId\n      content: $content\n      conversationId: $conversationId\n      channelId: $channelId\n    ) {\n      message {\n        ... on DirectMessage {\n          content\n          updatedAt\n        }\n        ... on Message {\n          content\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateMessage(\n    $messageId: Float!\n    $content: String!\n    $conversationId: Float\n    $channelId: Float\n  ) {\n    updateMessage(\n      messageId: $messageId\n      content: $content\n      conversationId: $conversationId\n      channelId: $channelId\n    ) {\n      message {\n        ... on DirectMessage {\n          content\n          updatedAt\n        }\n        ... on Message {\n          content\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateServer($input: UpdateServerDto!, $file: Upload) {\n    updateServer(input: $input, file: $file) {\n      id\n      name\n      imageUrl\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateServer($input: UpdateServerDto!, $file: Upload) {\n    updateServer(input: $input, file: $file) {\n      id\n      name\n      imageUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateServerWithNewInviteCode($serverId: Float!) {\n    updateServerWithNewInviteCode(serverId: $serverId) {\n      id\n      name\n      imageUrl\n      inviteCode\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateServerWithNewInviteCode($serverId: Float!) {\n    updateServerWithNewInviteCode(serverId: $serverId) {\n      id\n      name\n      imageUrl\n      inviteCode\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetChannelById($input: FindChannelByIdDto!) {\n    getChannelById(input: $input) {\n      id\n      name\n      type\n      members {\n        id\n        profile {\n          id\n          name\n          email\n          imageUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetChannelById($input: FindChannelByIdDto!) {\n    getChannelById(input: $input) {\n      id\n      name\n      type\n      members {\n        id\n        profile {\n          id\n          name\n          email\n          imageUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMemberById($memberId: Float!, $serverId: Float!) {\n    getMemberById(memberId: $memberId, serverId: $serverId) {\n      id\n      role\n      profile {\n        id\n        name\n        email\n        imageUrl\n        servers {\n          id\n          name\n          channels {\n            id\n            name\n            type\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMemberById($memberId: Float!, $serverId: Float!) {\n    getMemberById(memberId: $memberId, serverId: $serverId) {\n      id\n      role\n      profile {\n        id\n        name\n        email\n        imageUrl\n        servers {\n          id\n          name\n          channels {\n            id\n            name\n            type\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMemberByProfileId($profileId: Float!, $serverId: Float!) {\n    getMemberByProfileId(profileId: $profileId, serverId: $serverId) {\n      id\n      role\n      profile {\n        id\n        name\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMemberByProfileId($profileId: Float!, $serverId: Float!) {\n    getMemberByProfileId(profileId: $profileId, serverId: $serverId) {\n      id\n      role\n      profile {\n        id\n        name\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMessagesByConversationIdOrChannelId(\n    $conversationId: Float\n    $channelId: Float\n  ) {\n    getMessagesByConversationIdOrChannelId(\n      conversationId: $conversationId\n      channelId: $channelId\n    ) {\n      messages {\n        ... on DirectMessage {\n          id\n\n          content\n          deleted\n          createdAt\n          conversationId\n          fileUrl\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n          content\n          deleted\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMessagesByConversationIdOrChannelId(\n    $conversationId: Float\n    $channelId: Float\n  ) {\n    getMessagesByConversationIdOrChannelId(\n      conversationId: $conversationId\n      channelId: $channelId\n    ) {\n      messages {\n        ... on DirectMessage {\n          id\n\n          content\n          deleted\n          createdAt\n          conversationId\n          fileUrl\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n          content\n          deleted\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProfileById($profileId: Float!) {\n    getProfileById(profileId: $profileId) {\n      id\n      name\n      email\n      servers {\n        id\n        name\n        channels {\n          id\n          name\n          type\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProfileById($profileId: Float!) {\n    getProfileById(profileId: $profileId) {\n      id\n      name\n      email\n      servers {\n        id\n        name\n        channels {\n          id\n          name\n          type\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetServerById($id: Float!, $profileId: Float!) {\n    getServerById(id: $id, profileId: $profileId) {\n      id\n      profileId\n      name\n      imageUrl\n      inviteCode\n      channels {\n        id\n        type\n        name\n      }\n      members {\n        id\n        role\n\n        profileId\n        profile {\n          id\n          name\n          imageUrl\n          email\n        }\n      }\n      profile {\n        id\n        name\n        imageUrl\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetServerById($id: Float!, $profileId: Float!) {\n    getServerById(id: $id, profileId: $profileId) {\n      id\n      profileId\n      name\n      imageUrl\n      inviteCode\n      channels {\n        id\n        type\n        name\n      }\n      members {\n        id\n        role\n\n        profileId\n        profile {\n          id\n          name\n          imageUrl\n          email\n        }\n      }\n      profile {\n        id\n        name\n        imageUrl\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetServerByProfileIdOfMember($profileId: Float!) {\n    getServerByProfileIdOfMember(profileId: $profileId) {\n      id\n      name\n      imageUrl\n    }\n  }\n"): (typeof documents)["\n  query GetServerByProfileIdOfMember($profileId: Float!) {\n    getServerByProfileIdOfMember(profileId: $profileId) {\n      id\n      name\n      imageUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription MessageCreated($conversationId: Float, $channelId: Float) {\n    messageCreated(conversationId: $conversationId, channelId: $channelId) {\n      message {\n        ... on DirectMessage {\n          id\n          content\n          deleted\n          createdAt\n          conversationId\n          fileUrl\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n          content\n          deleted\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription MessageCreated($conversationId: Float, $channelId: Float) {\n    messageCreated(conversationId: $conversationId, channelId: $channelId) {\n      message {\n        ... on DirectMessage {\n          id\n          content\n          deleted\n          createdAt\n          conversationId\n          fileUrl\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n          content\n          deleted\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription MessageDeleted($conversationId: Float, $channelId: Float) {\n    messageDeleted(conversationId: $conversationId, channelId: $channelId) {\n      message {\n        ... on DirectMessage {\n          id\n          content\n          deleted\n          conversationId\n          updatedAt\n          createdAt\n          fileUrl\n          member {\n            role\n\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n\n          content\n          deleted\n          updatedAt\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription MessageDeleted($conversationId: Float, $channelId: Float) {\n    messageDeleted(conversationId: $conversationId, channelId: $channelId) {\n      message {\n        ... on DirectMessage {\n          id\n          content\n          deleted\n          conversationId\n          updatedAt\n          createdAt\n          fileUrl\n          member {\n            role\n\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n\n          content\n          deleted\n          updatedAt\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription MessageUpdated($conversationId: Float, $channelId: Float) {\n    messageUpdated(conversationId: $conversationId, channelId: $channelId) {\n      message {\n        ... on DirectMessage {\n          id\n          content\n          createdAt\n          conversationId\n          fileUrl\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n          content\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription MessageUpdated($conversationId: Float, $channelId: Float) {\n    messageUpdated(conversationId: $conversationId, channelId: $channelId) {\n      message {\n        ... on DirectMessage {\n          id\n          content\n          createdAt\n          conversationId\n          fileUrl\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n\n        ... on Message {\n          id\n          content\n          createdAt\n          fileUrl\n          channel {\n            id\n          }\n          member {\n            role\n            id\n            profileId\n            profile {\n              email\n              id\n              name\n              imageUrl\n            }\n          }\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;
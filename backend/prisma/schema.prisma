generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String @db.Text
  email    String @unique @db.Text

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         Int    @id @default(autoincrement())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId Int
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   Int        @id @default(autoincrement())
  role MemberRole @default(GUEST)

  profileId Int
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   Int         @id @default(autoincrement())
  name String
  type ChannelType @default(TEXT)

  profileId Int
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      Int    @id @default(autoincrement())
  content String @db.Text

  fileUrl String? @db.Text

  memberId Int
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId Int
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id Int @id @default(autoincrement())

  memberOneId Int
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId Int
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      Int     @id @default(autoincrement())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId Int
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
